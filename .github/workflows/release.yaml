---
name: Release

on:
  workflow_call:

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release

    steps:
      # check-out repo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      # install poetry
      - name: Install poetry
        run: pipx install poetry

      # set-up python with cache
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'

      # install requirements
      - name: Install requirements
        run: poetry install --only semver

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install front-end dependencies
      - name: Install front-end dependencies
        run: |
          cd web
          npm install

      # Build front-end
      - name: Build front-end
        run: |
          cd web
          npm run build

      # semantic release
      - name: Python Semantic Release
        id: semantic_release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -o pipefail
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          poetry run semantic-release --strict version
        continue-on-error: true

      - name: Publish
        if: ${{ steps.semantic_release.outcome == 'success' }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -o pipefail
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry -vvv publish -n
